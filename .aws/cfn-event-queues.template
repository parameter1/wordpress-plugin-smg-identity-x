{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Creates and manages incoming/outgoing event queues.",

  "Resources": {
    "IdxMessageQueue": {
      "Type" : "AWS::SQS::Queue",
      "Properties" : {
        "QueueName" : "identityx-hooks",
        "MessageRetentionPeriod": 1209600,
        "VisibilityTimeout": 5,
        "RedrivePolicy": {
          "maxReceiveCount": 10,
          "deadLetterTargetArn": {
            "Fn::GetAtt": ["IdxDeadLetterQueue", "Arn"]
          }
        }
      }
    },
    "IdxDeadLetterQueue": {
      "Type" : "AWS::SQS::Queue",
      "Properties" : {
        "QueueName" : "identityx-hooks-dlq",
        "MessageRetentionPeriod": 1209600
      }
    },
    "WpMessageQueue": {
      "Type" : "AWS::SQS::Queue",
      "Properties" : {
        "QueueName" : "wordpress-hooks",
        "MessageRetentionPeriod": 1209600,
        "VisibilityTimeout": 5,
        "RedrivePolicy": {
          "maxReceiveCount": 10,
          "deadLetterTargetArn": {
            "Fn::GetAtt": ["WpDeadLetterQueue", "Arn"]
          }
        }
      }
    },
    "WpDeadLetterQueue": {
      "Type" : "AWS::SQS::Queue",
      "Properties" : {
        "QueueName" : "wordpress-hooks-dlq",
        "MessageRetentionPeriod": 1209600
      }
    },
    "User": {
      "Type": "AWS::IAM::User",
      "Properties": {
        "UserName": "event-hooks",
        "Policies" : [ {
          "PolicyName" : "sqs-rw-event-hooks",
          "PolicyDocument" : {
            "Version": "2012-10-17",
            "Statement" : [ {
              "Effect" : "Allow",
              "Action" : [ "sqs:DeleteMessage", "sqs:ReceiveMessage", "sqs:SendMessage" ],
              "Resource" : [
                { "Fn::GetAtt" : [ "IdxMessageQueue", "Arn" ] },
                { "Fn::GetAtt" : [ "WpMessageQueue", "Arn" ] }
              ]
            } ]
          }
        } ]
      }
    },
    "AccessKey": {
      "Type": "AWS::IAM::AccessKey",
      "Properties": {
        "UserName": { "Ref" : "User" }
      }
    },
    "ApiGateway": {
      "Type" : "AWS::ApiGateway::RestApi",
      "Properties" : {
        "Name" : "identityx-hooks",
        "Description": "API Endpoint to receive JSON payloads and queue in SQS"
      }
    },
    "ApiGatewayRole": {
      "Type" : "AWS::IAM::Role",
      "Properties" : {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": ["sts:AssumeRole"],
              "Effect": "Allow",
              "Principal": { "Service": ["apigateway.amazonaws.com"] }
            }
          ],
          "Version": "2012-10-17"
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": ["sqs:SendMessage"],
                  "Effect": "Allow",
                  "Resource": [
                    { "Fn::GetAtt": ["IdxMessageQueue", "Arn"] },
                    { "Fn::GetAtt": ["WpMessageQueue", "Arn"] }
                  ]
                },
                {
                  "Action": ["logs:CreateLogGroup", "logs:CreateLogStream", "logs:PutLogEvents"],
                  "Effect": "Allow",
                  "Resource": ["*"]
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "apig-sqs-send-msg-policy"
          }
        ],
        "RoleName" : "apig-sqs-send-msg-role"
      }
    },
    "ApiGatewayResourceEnqueueIdx": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": { "Fn::GetAtt": ["ApiGateway", "RootResourceId"] },
        "PathPart": "enqueue-idx",
        "RestApiId": { "Ref": "ApiGateway" }
      }
    },
    "ApiGatewayResourceEnqueueWp": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": { "Fn::GetAtt": ["ApiGateway", "RootResourceId"] },
        "PathPart": "enqueue-wp",
        "RestApiId": { "Ref": "ApiGateway" }
      }
    },
    "ApiGatewayPostMethodIdx": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "POST",
        "Integration": {
          "Credentials": { "Fn::GetAtt": ["ApiGatewayRole", "Arn"] },
          "IntegrationHttpMethod": "POST",
          "IntegrationResponses": [{ "StatusCode": "200" }],
          "PassthroughBehavior": "NEVER",
          "RequestParameters": {
            "integration.request.header.Content-Type": "'application/x-www-form-urlencoded'"
          },
          "RequestTemplates": {
            "application/json": "Action=SendMessage&MessageBody=$input.body"
          },
          "Type": "AWS",
          "Uri": { "Fn::Join": ["", [
            "arn:aws:apigateway:",
            { "Ref": "AWS::Region" },
            ":sqs:path/",
            { "Ref": "AWS::AccountId" },
            "/",
            { "Fn::GetAtt": ["IdxMessageQueue", "QueueName"] }
            ]] }
        },
        "MethodResponses": [
          { "ResponseModels": { "application/json": "Empty" }, "StatusCode": "200" }
        ],
        "ResourceId": { "Ref": "ApiGatewayResourceEnqueueIdx" },
        "RestApiId": { "Ref": "ApiGateway" }
      }
    },
    "ApiGatewayPostMethodWp": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "POST",
        "Integration": {
          "Credentials": { "Fn::GetAtt": ["ApiGatewayRole", "Arn"] },
          "IntegrationHttpMethod": "POST",
          "IntegrationResponses": [{ "StatusCode": "200" }],
          "PassthroughBehavior": "NEVER",
          "RequestParameters": {
            "integration.request.header.Content-Type": "'application/x-www-form-urlencoded'"
          },
          "RequestTemplates": {
            "application/json": "Action=SendMessage&MessageBody=$input.body"
          },
          "Type": "AWS",
          "Uri": { "Fn::Join": ["", [
            "arn:aws:apigateway:",
            { "Ref": "AWS::Region" },
            ":sqs:path/",
            { "Ref": "AWS::AccountId" },
            "/",
            { "Fn::GetAtt": ["WpMessageQueue", "QueueName"] }
            ]] }
        },
        "MethodResponses": [
          { "ResponseModels": { "application/json": "Empty" }, "StatusCode": "200" }
        ],
        "ResourceId": { "Ref": "ApiGatewayResourceEnqueueWp" },
        "RestApiId": { "Ref": "ApiGateway" }
      }
    },
    "ApiGatewayProdDeployment": {
      "DependsOn": [
        "ApiGatewayPostMethodIdx",
        "ApiGatewayPostMethodWp"
      ],
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": { "Ref": "ApiGateway" }
      }
    },
    "ApiGatewayProdStage": {
      "Type": "AWS::ApiGateway::Stage",
      "Properties": {
        "DeploymentId": { "Ref": "ApiGatewayProdDeployment" },
        "RestApiId": { "Ref": "ApiGateway" },
        "StageName": "prod"
      }
    }
  },
  "Outputs": {
    "IdxMessageQueueUrl": {
      "Value": { "Ref": "IdxMessageQueue" }
    },
    "WpMessageQueueUrl": {
      "Value": { "Ref": "WpMessageQueue" }
    },
    "UserAccessKey": {
      "Value" : { "Ref" : "AccessKey" }
    },
    "UserSecretAccessKey": {
      "Value": { "Fn::GetAtt": ["AccessKey", "SecretAccessKey"] }
    },
    "ApiGatewayEndpoint": {
      "Value": { "Fn::Join": ["", ["https://", { "Ref": "ApiGateway" }, ".execute-api.", { "Ref": "AWS::Region" }, ".amazonaws.com"]] }
    }
  }
}
